inline primitive generators generated code
genLowcodeInt64NotEqual
	<option: #LowcodeVM>
	<inline: true>
	"Generated by the Lowcode instruction generator."
	| falseLabel first contJump falseJump secondLow secondHigh second falseJump2 firstHigh firstLow |
	BytesPerWord = 4 ifTrue: [
		self allocateRegistersForLowcodeInteger4: [:secondLowValue :secondHighValue :firstLowValue :firstHighValue |
			secondLow := secondLowValue.
			secondHigh := secondHighValue.
			firstLow := firstLowValue.
			firstHigh := firstHighValue.
		].

		self ssNativeTop nativePopToReg: secondLow secondReg: secondHigh.
		self ssNativePop: 1.
		self ssNativeTop nativePopToReg: firstLow secondReg: firstHigh.
		self ssNativePop: 1.

		self CmpR: secondHigh R: firstHigh.
		falseJump := self JumpNonZero: 0.
		self CmpR: secondLow R: firstLow.
		falseJump2 := self JumpNonZero: 0.
		"False result"
		self MoveCq: 0 R: firstLow.
		contJump := self Jump: 0.
		"True result"
		falseLabel := self MoveCq: 1 R: firstLow.
		falseJump jmpTarget: falseLabel.
		falseJump2 jmpTarget: falseLabel.
		contJump jmpTarget: self Label.
		self ssPushNativeRegister: firstLow.

	] ifFalse: [
		self allocateRegistersForLowcodeInteger2: [:secondValue :firstValue |
			second := secondValue.
			first := firstValue.
		].

		self ssNativeTop nativePopToReg: second.
		self ssNativePop: 1.
		self ssNativeTop nativePopToReg: first.
		self ssNativePop: 1.

		self CmpR: second R: first.
		falseJump := self JumpZero: 0.
		"True result"
		self MoveCq: 1 R: first.
		contJump := self Jump: 0.
		"False result"
		falseJump jmpTarget: self Label.
		self MoveCq: 0 R: first.
		contJump jmpTarget: self Label.
		self ssPushNativeRegister: first.

	].
	^ 0

