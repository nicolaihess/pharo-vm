inline primitive generators generated code
genLowcodeSignExtend64From32
	<option: #LowcodeVM>
	<inline: true>
	"Generated by the Lowcode instruction generator."
	| value result resultLow resultHigh isNegative cont |
	BytesPerWord = 4 ifTrue: [
		self allocateRegistersForLowcodeIntegerResultInteger2: [:valueValue :resultLowValue :resultHighValue |
			value := valueValue.
			resultLow := resultLowValue.
			resultHigh := resultHighValue.
		].

		self ssNativeTop nativePopToReg: value.
		self ssNativePop: 1.

		self MoveR: value R: resultLow.
		"Check the sign to set the high word"
		self CmpCq: 0 R: value.
		"Positive"
		isNegative := self JumpLess: 0.
		self MoveCq: 0 R: resultHigh.
		cont := self Jump: 0.
		"Negative"
		isNegative jmpTarget: (self MoveCq: -1 R: resultHigh).
		cont jmpTarget: self Label.
		self ssPushNativeRegister: resultLow secondRegister: resultHigh.

	] ifFalse: [
		self allocateRegistersForLowcodeIntegerResultInteger: [:valueValue :resultValue |
			value := valueValue.
			result := resultValue.
		].

		self ssNativeTop nativePopToReg: value.
		self ssNativePop: 1.

		self SignExtend32R: value R: value.
		self ssPushNativeRegister: value.

	].
	^ 0

