inline primitive generators generated code
genLowcodeSignExtend64From8
	<option: #LowcodeVM>
	<inline: true>
	"Generated by the Lowcode instruction generator."
	| value result resultLow resultHigh isNegative valueLow cont valueHigh |
	BytesPerWord = 4 ifTrue: [
		self allocateRegistersForLowcodeInteger2ResultInteger2: [:valueLowValue :valueHighValue :resultLowValue :resultHighValue |
			valueLow := valueLowValue.
			valueHigh := valueHighValue.
			resultLow := resultLowValue.
			resultHigh := resultHighValue.
		].

		self ssNativeTop nativePopToReg: valueLow secondReg: valueHigh.
		self ssNativePop: 1.

		self SignExtend8R: valueLow R: valueLow.
		"Check the sign to set the high word"
		self CmpCq: 0 R: valueLow.
		"Positive"
		isNegative := self JumpLess: 0.
		self MoveCq: 0 R: valueHigh.
		cont := self Jump: 0.
		"Negative"
		isNegative jmpTarget: (self MoveCq: -1 R: valueHigh).
		cont jmpTarget: self Label.
		self ssPushNativeRegister: valueLow secondRegister: valueHigh.

	] ifFalse: [
		self allocateRegistersForLowcodeIntegerResultInteger: [:valueValue :resultValue |
			value := valueValue.
			result := resultValue.
		].

		self ssNativeTop nativePopToReg: value.
		self ssNativePop: 1.

		self ZeroExtend16R: value R: value.
		self ssPushNativeRegister: value.

	].
	^ 0

